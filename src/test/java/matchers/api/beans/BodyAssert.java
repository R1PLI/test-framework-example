package api.beans;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Body} specific assertions - Generated by CustomAssertionGenerator.
 */
public class BodyAssert extends AbstractAssert<BodyAssert, Body> {

  /**
   * Creates a new <code>{@link BodyAssert}</code> to make assertions on actual Body.
   * @param actual the Body we want to make assertions on.
   */
  public BodyAssert(Body actual) {
    super(actual, BodyAssert.class);
  }

  /**
   * An entry point for BodyAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myBody)</code> and get specific assertion with code completion.
   * @param actual the Body we want to make assertions on.
   * @return a new <code>{@link BodyAssert}</code>
   */
  public static BodyAssert assertThat(Body actual) {
    return new BodyAssert(actual);
  }

  /**
   * Verifies that the actual Body's additionalProperties is equal to the given one.
   * @param additionalProperties the given additionalProperties to compare the actual Body's additionalProperties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Body's additionalProperties is not equal to the given one.
   */
  public BodyAssert hasAdditionalProperties(java.util.Map additionalProperties) {
    // check that actual Body we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting additionalProperties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualAdditionalProperties = actual.getAdditionalProperties();
    if (!Objects.areEqual(actualAdditionalProperties, additionalProperties)) {
      failWithMessage(assertjErrorMessage, actual, additionalProperties, actualAdditionalProperties);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Body's someComment is equal to the given one.
   * @param someComment the given someComment to compare the actual Body's someComment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Body's someComment is not equal to the given one.
   */
  public BodyAssert hasSomeComment(String someComment) {
    // check that actual Body we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting someComment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSomeComment = actual.getSomeComment();
    if (!Objects.areEqual(actualSomeComment, someComment)) {
      failWithMessage(assertjErrorMessage, actual, someComment, actualSomeComment);
    }

    // return the current assertion for method chaining
    return this;
  }

}

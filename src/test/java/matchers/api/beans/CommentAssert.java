package api.beans;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Comment} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CommentAssert extends AbstractAssert<CommentAssert, Comment> {

  /**
   * Creates a new <code>{@link CommentAssert}</code> to make assertions on actual Comment.
   * @param actual the Comment we want to make assertions on.
   */
  public CommentAssert(Comment actual) {
    super(actual, CommentAssert.class);
  }

  /**
   * An entry point for CommentAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myComment)</code> and get specific assertion with code completion.
   * @param actual the Comment we want to make assertions on.
   * @return a new <code>{@link CommentAssert}</code>
   */
  public static CommentAssert assertThat(Comment actual) {
    return new CommentAssert(actual);
  }

  /**
   * Verifies that the actual Comment's additionalProperties is equal to the given one.
   * @param additionalProperties the given additionalProperties to compare the actual Comment's additionalProperties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Comment's additionalProperties is not equal to the given one.
   */
  public CommentAssert hasAdditionalProperties(java.util.Map additionalProperties) {
    // check that actual Comment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting additionalProperties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualAdditionalProperties = actual.getAdditionalProperties();
    if (!Objects.areEqual(actualAdditionalProperties, additionalProperties)) {
      failWithMessage(assertjErrorMessage, actual, additionalProperties, actualAdditionalProperties);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Comment's body is equal to the given one.
   * @param body the given body to compare the actual Comment's body to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Comment's body is not equal to the given one.
   */
  public CommentAssert hasBody(Body body) {
    // check that actual Comment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting body of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Body actualBody = actual.getBody();
    if (!Objects.areEqual(actualBody, body)) {
      failWithMessage(assertjErrorMessage, actual, body, actualBody);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Comment's id is equal to the given one.
   * @param id the given id to compare the actual Comment's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Comment's id is not equal to the given one.
   */
  public CommentAssert hasId(Integer id) {
    // check that actual Comment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Comment's postComment is equal to the given one.
   * @param postComment the given postComment to compare the actual Comment's postComment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Comment's postComment is not equal to the given one.
   */
  public CommentAssert hasPostComment(String postComment) {
    // check that actual Comment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting postComment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPostComment = actual.getPostComment();
    if (!Objects.areEqual(actualPostComment, postComment)) {
      failWithMessage(assertjErrorMessage, actual, postComment, actualPostComment);
    }

    // return the current assertion for method chaining
    return this;
  }

}

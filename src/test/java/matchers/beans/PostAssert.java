package beans;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Post} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PostAssert extends AbstractAssert<PostAssert, Post> {

  /**
   * Creates a new <code>{@link PostAssert}</code> to make assertions on actual Post.
   * @param actual the Post we want to make assertions on.
   */
  public PostAssert(Post actual) {
    super(actual, PostAssert.class);
  }

  /**
   * An entry point for PostAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myPost)</code> and get specific assertion with code completion.
   * @param actual the Post we want to make assertions on.
   * @return a new <code>{@link PostAssert}</code>
   */
  public static PostAssert assertThat(Post actual) {
    return new PostAssert(actual);
  }

  /**
   * Verifies that the actual Post's additionalProperties is equal to the given one.
   * @param additionalProperties the given additionalProperties to compare the actual Post's additionalProperties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Post's additionalProperties is not equal to the given one.
   */
  public PostAssert hasAdditionalProperties(java.util.Map additionalProperties) {
    // check that actual Post we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting additionalProperties of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualAdditionalProperties = actual.getAdditionalProperties();
    if (!Objects.areEqual(actualAdditionalProperties, additionalProperties)) {
      failWithMessage(assertjErrorMessage, actual, additionalProperties, actualAdditionalProperties);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Post's author is equal to the given one.
   * @param author the given author to compare the actual Post's author to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Post's author is not equal to the given one.
   */
  public PostAssert hasAuthor(String author) {
    // check that actual Post we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting author of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualAuthor = actual.getAuthor();
    if (!Objects.areEqual(actualAuthor, author)) {
      failWithMessage(assertjErrorMessage, actual, author, actualAuthor);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Post's id is equal to the given one.
   * @param id the given id to compare the actual Post's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Post's id is not equal to the given one.
   */
  public PostAssert hasId(Long id) {
    // check that actual Post we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Post's title is equal to the given one.
   * @param title the given title to compare the actual Post's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Post's title is not equal to the given one.
   */
  public PostAssert hasTitle(String title) {
    // check that actual Post we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualTitle = actual.getTitle();
    if (!Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

}
